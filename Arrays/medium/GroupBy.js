/*
    Напишите код, который расширяет все массивы таким образом, чтобы можно было вызвать  array.groupBy(fn) метод для любого массива, и он вернет сгруппированную  версию массива.
    Сгруппированный массив — это объект, в котором каждый ключ является выходом , а каждое значение — массивом ,fn(arr[i]) содержащим все элементы исходного массива, которые 
    генерируют этот ключ.
    Предоставленный обратный вызов fn примет элемент в массиве и вернет строковый ключ.
    Порядок каждого списка значений должен соответствовать порядку расположения элементов в массиве. Допускается любой порядок ключей.

    Пример:
        Входные данные:  array = [ 
            {"id":"1"}, 
            {"id":"1"}, 
            {"id":"2"} 
        ], 
        fn = function (item) { 
            return item.id; 
        } 
        
        Выходные данные: { 
            "1": [{"id": "1"}, {"id": "1"}],    
            "2": [{"id": "2"}] 
        } 

        Пояснение: 
            Выходные данные из array.groupBy(fn). 
            Функция-селектор извлекает "id" каждого элемента массива. 
            Есть два объекта с "id", равным 1. Оба этих объекта помещаются в первый массив. 
            Есть один объект с "id", равным 2. Этот объект помещается во второй массив.

 */

function groupBy(array, fn) {
    let currentKey = ''
    return array.reduce((acc, item) => {
        currentKey = fn(item)

        if (acc.hasOwnProperty(currentKey)) {
            acc[currentKey].push(item)
        } else {
            acc[currentKey] = [item]
            return acc
        }
   },{})
}

const array = [{"id":"1"}, {"id":"1"}, {"id":"2"}];
const result = groupBy(array, item => item.id);
console.log(result); // {"1":[{"id":"1"},{"id":"1"}],"2":[{"id":"2"}]}
